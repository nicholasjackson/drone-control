// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package control

import (
	"sync"
)

var (
	lockCameraMockImages sync.RWMutex
	lockCameraMockStart  sync.RWMutex
	lockCameraMockStop   sync.RWMutex
)

// CameraMock is a mock implementation of Camera.
//
//     func TestSomethingThatUsesCamera(t *testing.T) {
//
//         // make and configure a mocked Camera
//         mockedCamera := &CameraMock{
//             ImagesFunc: func() chan []byte {
// 	               panic("TODO: mock out the Images method")
//             },
//             StartFunc: func()  {
// 	               panic("TODO: mock out the Start method")
//             },
//             StopFunc: func()  {
// 	               panic("TODO: mock out the Stop method")
//             },
//         }
//
//         // TODO: use mockedCamera in code that requires Camera
//         //       and then make assertions.
//
//     }
type CameraMock struct {
	// ImagesFunc mocks the Images method.
	ImagesFunc func() chan []byte

	// StartFunc mocks the Start method.
	StartFunc func()

	// StopFunc mocks the Stop method.
	StopFunc func()

	// calls tracks calls to the methods.
	calls struct {
		// Images holds details about calls to the Images method.
		Images []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
		}
		// Stop holds details about calls to the Stop method.
		Stop []struct {
		}
	}
}

// Images calls ImagesFunc.
func (mock *CameraMock) Images() chan []byte {
	if mock.ImagesFunc == nil {
		panic("moq: CameraMock.ImagesFunc is nil but Camera.Images was just called")
	}
	callInfo := struct {
	}{}
	lockCameraMockImages.Lock()
	mock.calls.Images = append(mock.calls.Images, callInfo)
	lockCameraMockImages.Unlock()
	return mock.ImagesFunc()
}

// ImagesCalls gets all the calls that were made to Images.
// Check the length with:
//     len(mockedCamera.ImagesCalls())
func (mock *CameraMock) ImagesCalls() []struct {
} {
	var calls []struct {
	}
	lockCameraMockImages.RLock()
	calls = mock.calls.Images
	lockCameraMockImages.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *CameraMock) Start() {
	if mock.StartFunc == nil {
		panic("moq: CameraMock.StartFunc is nil but Camera.Start was just called")
	}
	callInfo := struct {
	}{}
	lockCameraMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockCameraMockStart.Unlock()
	mock.StartFunc()
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedCamera.StartCalls())
func (mock *CameraMock) StartCalls() []struct {
} {
	var calls []struct {
	}
	lockCameraMockStart.RLock()
	calls = mock.calls.Start
	lockCameraMockStart.RUnlock()
	return calls
}

// Stop calls StopFunc.
func (mock *CameraMock) Stop() {
	if mock.StopFunc == nil {
		panic("moq: CameraMock.StopFunc is nil but Camera.Stop was just called")
	}
	callInfo := struct {
	}{}
	lockCameraMockStop.Lock()
	mock.calls.Stop = append(mock.calls.Stop, callInfo)
	lockCameraMockStop.Unlock()
	mock.StopFunc()
}

// StopCalls gets all the calls that were made to Stop.
// Check the length with:
//     len(mockedCamera.StopCalls())
func (mock *CameraMock) StopCalls() []struct {
} {
	var calls []struct {
	}
	lockCameraMockStop.RLock()
	calls = mock.calls.Stop
	lockCameraMockStop.RUnlock()
	return calls
}
